{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\bots-challenge\\\\src\\\\components\\\\BotsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotsPage() {\n  _s();\n  const [army, setArmy] = useState([]); //State to manage list of bots in the user's army\n\n  const addBotToArmy = newBot => {\n    if (!army.find(bot => bot.id === newBot.id)) {\n      setArmy([...army, newBot]); //Adds bot to the army by updating the state\n    }\n  };\n  const removeFromArmy = botToRemove => {\n    setArmy(army.filter(bot => bot.id !== botToRemove.id)); //Filters out the bot to remove it from the army\n  };\n  const handleBotDelete = async botToDelete => {\n    try {\n      // send delete request to the backend\n      await fetch(`http://localhost:3000/bots/${botToDelete.id}`, {\n        method: \"DELETE\"\n      });\n      // Remove the bot from the army if it's in the army\n      removeFromArmy(botToDelete);\n    } catch (error) {\n      console.error(\"Error during delete request:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: army,\n      onRemove: removeFromArmy,\n      onBotDelete: handleBotDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(BotCollection, {\n      onAddBot: addBotToArmy,\n      onBotDelete: handleBotDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(BotsPage, \"QLDV7L1XtdT2me87iEwv71oMomY=\");\n_c = BotsPage;\n;\nexport default BotsPage;\nvar _c;\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"names":["React","useState","YourBotArmy","BotCollection","jsxDEV","_jsxDEV","BotsPage","_s","army","setArmy","addBotToArmy","newBot","find","bot","id","removeFromArmy","botToRemove","filter","handleBotDelete","botToDelete","fetch","method","error","console","children","bots","onRemove","onBotDelete","fileName","_jsxFileName","lineNumber","columnNumber","onAddBot","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/bots-challenge/src/components/BotsPage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport YourBotArmy from \"./YourBotArmy\";\r\nimport BotCollection from \"./BotCollection\";\r\n\r\nfunction BotsPage() {\r\n  const[army, setArmy]=useState([]); //State to manage list of bots in the user's army\r\n\r\n  const addBotToArmy=(newBot)=> {\r\n    if(!army.find((bot)=>bot.id === newBot.id)) {\r\n      setArmy([...army,newBot]); //Adds bot to the army by updating the state\r\n    }\r\n  };\r\n\r\n  const removeFromArmy = (botToRemove) => {\r\n    setArmy(army.filter((bot) => bot.id !== botToRemove.id)); //Filters out the bot to remove it from the army\r\n  };\r\n\r\n  const handleBotDelete = async (botToDelete) => {\r\n    try {\r\n      // send delete request to the backend\r\n      await fetch(`http://localhost:3000/bots/${botToDelete.id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      // Remove the bot from the army if it's in the army\r\n      removeFromArmy(botToDelete);\r\n    } catch (error) {\r\n      console.error(\"Error during delete request:\", error);\r\n    }\r\n  };\r\n\r\n\r\n \r\n\r\n\r\nreturn (\r\n    <div>\r\n      <YourBotArmy bots={army} onRemove={removeFromArmy} onBotDelete={handleBotDelete}/> {/* Passing the army bots and the function to remove a bot*/}\r\n      <BotCollection onAddBot={addBotToArmy} onBotDelete={handleBotDelete}/> {/*Passing the function to add a bot to the army and the onDelete prop*/}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default BotsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,GAACR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEnC,MAAMS,YAAY,GAAEC,MAAM,IAAI;IAC5B,IAAG,CAACH,IAAI,CAACI,IAAI,CAAEC,GAAG,IAAGA,GAAG,CAACC,EAAE,KAAKH,MAAM,CAACG,EAAE,CAAC,EAAE;MAC1CL,OAAO,CAAC,CAAC,GAAGD,IAAI,EAACG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC;EAED,MAAMI,cAAc,GAAIC,WAAW,IAAK;IACtCP,OAAO,CAACD,IAAI,CAACS,MAAM,CAAEJ,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKE,WAAW,CAACF,EAAE,CAAC,CAAC,CAAC,CAAC;EAC5D,CAAC;EAED,MAAMI,eAAe,GAAG,MAAOC,WAAW,IAAK;IAC7C,IAAI;MACF;MACA,MAAMC,KAAK,CAAC,8BAA8BD,WAAW,CAACL,EAAE,EAAE,EAAE;QAC1DO,MAAM,EAAE;MACV,CAAC,CAAC;MACF;MACAN,cAAc,CAACI,WAAW,CAAC;IAC7B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAMH,oBACIjB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACH,WAAW;MAACuB,IAAI,EAAEjB,IAAK;MAACkB,QAAQ,EAAEX,cAAe;MAACY,WAAW,EAAET;IAAgB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,KAAC,eACnF1B,OAAA,CAACF,aAAa;MAAC6B,QAAQ,EAAEtB,YAAa;MAACiB,WAAW,EAAET;IAAgB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEV;AAACxB,EAAA,CApCQD,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAoChB;AAED,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}